/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SavingsAccount } from "./SavingsAccount";
import { SavingsAccountCountArgs } from "./SavingsAccountCountArgs";
import { SavingsAccountFindManyArgs } from "./SavingsAccountFindManyArgs";
import { SavingsAccountFindUniqueArgs } from "./SavingsAccountFindUniqueArgs";
import { CreateSavingsAccountArgs } from "./CreateSavingsAccountArgs";
import { UpdateSavingsAccountArgs } from "./UpdateSavingsAccountArgs";
import { DeleteSavingsAccountArgs } from "./DeleteSavingsAccountArgs";
import { SavingsAccountService } from "../savingsAccount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SavingsAccount)
export class SavingsAccountResolverBase {
  constructor(
    protected readonly service: SavingsAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "read",
    possession: "any",
  })
  async _savingsAccountsMeta(
    @graphql.Args() args: SavingsAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SavingsAccount])
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "read",
    possession: "any",
  })
  async savingsAccounts(
    @graphql.Args() args: SavingsAccountFindManyArgs
  ): Promise<SavingsAccount[]> {
    return this.service.savingsAccounts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SavingsAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "read",
    possession: "own",
  })
  async savingsAccount(
    @graphql.Args() args: SavingsAccountFindUniqueArgs
  ): Promise<SavingsAccount | null> {
    const result = await this.service.savingsAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavingsAccount)
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "create",
    possession: "any",
  })
  async createSavingsAccount(
    @graphql.Args() args: CreateSavingsAccountArgs
  ): Promise<SavingsAccount> {
    return await this.service.createSavingsAccount({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavingsAccount)
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "update",
    possession: "any",
  })
  async updateSavingsAccount(
    @graphql.Args() args: UpdateSavingsAccountArgs
  ): Promise<SavingsAccount | null> {
    try {
      return await this.service.updateSavingsAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SavingsAccount)
  @nestAccessControl.UseRoles({
    resource: "SavingsAccount",
    action: "delete",
    possession: "any",
  })
  async deleteSavingsAccount(
    @graphql.Args() args: DeleteSavingsAccountArgs
  ): Promise<SavingsAccount | null> {
    try {
      return await this.service.deleteSavingsAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
