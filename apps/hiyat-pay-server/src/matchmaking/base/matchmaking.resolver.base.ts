/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Matchmaking } from "./Matchmaking";
import { MatchmakingCountArgs } from "./MatchmakingCountArgs";
import { MatchmakingFindManyArgs } from "./MatchmakingFindManyArgs";
import { MatchmakingFindUniqueArgs } from "./MatchmakingFindUniqueArgs";
import { CreateMatchmakingArgs } from "./CreateMatchmakingArgs";
import { UpdateMatchmakingArgs } from "./UpdateMatchmakingArgs";
import { DeleteMatchmakingArgs } from "./DeleteMatchmakingArgs";
import { MatchmakingService } from "../matchmaking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Matchmaking)
export class MatchmakingResolverBase {
  constructor(
    protected readonly service: MatchmakingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "read",
    possession: "any",
  })
  async _matchmakingsMeta(
    @graphql.Args() args: MatchmakingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Matchmaking])
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "read",
    possession: "any",
  })
  async matchmakings(
    @graphql.Args() args: MatchmakingFindManyArgs
  ): Promise<Matchmaking[]> {
    return this.service.matchmakings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Matchmaking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "read",
    possession: "own",
  })
  async matchmaking(
    @graphql.Args() args: MatchmakingFindUniqueArgs
  ): Promise<Matchmaking | null> {
    const result = await this.service.matchmaking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Matchmaking)
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "create",
    possession: "any",
  })
  async createMatchmaking(
    @graphql.Args() args: CreateMatchmakingArgs
  ): Promise<Matchmaking> {
    return await this.service.createMatchmaking({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Matchmaking)
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "update",
    possession: "any",
  })
  async updateMatchmaking(
    @graphql.Args() args: UpdateMatchmakingArgs
  ): Promise<Matchmaking | null> {
    try {
      return await this.service.updateMatchmaking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Matchmaking)
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "delete",
    possession: "any",
  })
  async deleteMatchmaking(
    @graphql.Args() args: DeleteMatchmakingArgs
  ): Promise<Matchmaking | null> {
    try {
      return await this.service.deleteMatchmaking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
