/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MatchmakingService } from "../matchmaking.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MatchmakingCreateInput } from "./MatchmakingCreateInput";
import { Matchmaking } from "./Matchmaking";
import { MatchmakingFindManyArgs } from "./MatchmakingFindManyArgs";
import { MatchmakingWhereUniqueInput } from "./MatchmakingWhereUniqueInput";
import { MatchmakingUpdateInput } from "./MatchmakingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MatchmakingControllerBase {
  constructor(
    protected readonly service: MatchmakingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Matchmaking })
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMatchmaking(
    @common.Body() data: MatchmakingCreateInput
  ): Promise<Matchmaking> {
    return await this.service.createMatchmaking({
      data: data,
      select: {
        age: true,
        city: true,
        createdAt: true,
        educationLevel: true,
        eyeColor: true,
        height: true,
        id: true,
        race: true,
        relationshipType: true,
        state: true,
        updatedAt: true,
        user: true,
        weight: true,
        zipCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Matchmaking] })
  @ApiNestedQuery(MatchmakingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async matchmakings(@common.Req() request: Request): Promise<Matchmaking[]> {
    const args = plainToClass(MatchmakingFindManyArgs, request.query);
    return this.service.matchmakings({
      ...args,
      select: {
        age: true,
        city: true,
        createdAt: true,
        educationLevel: true,
        eyeColor: true,
        height: true,
        id: true,
        race: true,
        relationshipType: true,
        state: true,
        updatedAt: true,
        user: true,
        weight: true,
        zipCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Matchmaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async matchmaking(
    @common.Param() params: MatchmakingWhereUniqueInput
  ): Promise<Matchmaking | null> {
    const result = await this.service.matchmaking({
      where: params,
      select: {
        age: true,
        city: true,
        createdAt: true,
        educationLevel: true,
        eyeColor: true,
        height: true,
        id: true,
        race: true,
        relationshipType: true,
        state: true,
        updatedAt: true,
        user: true,
        weight: true,
        zipCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Matchmaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMatchmaking(
    @common.Param() params: MatchmakingWhereUniqueInput,
    @common.Body() data: MatchmakingUpdateInput
  ): Promise<Matchmaking | null> {
    try {
      return await this.service.updateMatchmaking({
        where: params,
        data: data,
        select: {
          age: true,
          city: true,
          createdAt: true,
          educationLevel: true,
          eyeColor: true,
          height: true,
          id: true,
          race: true,
          relationshipType: true,
          state: true,
          updatedAt: true,
          user: true,
          weight: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Matchmaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Matchmaking",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMatchmaking(
    @common.Param() params: MatchmakingWhereUniqueInput
  ): Promise<Matchmaking | null> {
    try {
      return await this.service.deleteMatchmaking({
        where: params,
        select: {
          age: true,
          city: true,
          createdAt: true,
          educationLevel: true,
          eyeColor: true,
          height: true,
          id: true,
          race: true,
          relationshipType: true,
          state: true,
          updatedAt: true,
          user: true,
          weight: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
