/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Filter } from "./Filter";
import { FilterCountArgs } from "./FilterCountArgs";
import { FilterFindManyArgs } from "./FilterFindManyArgs";
import { FilterFindUniqueArgs } from "./FilterFindUniqueArgs";
import { CreateFilterArgs } from "./CreateFilterArgs";
import { UpdateFilterArgs } from "./UpdateFilterArgs";
import { DeleteFilterArgs } from "./DeleteFilterArgs";
import { User } from "../../user/base/User";
import { FilterService } from "../filter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Filter)
export class FilterResolverBase {
  constructor(
    protected readonly service: FilterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "read",
    possession: "any",
  })
  async _filtersMeta(
    @graphql.Args() args: FilterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Filter])
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "read",
    possession: "any",
  })
  async filters(@graphql.Args() args: FilterFindManyArgs): Promise<Filter[]> {
    return this.service.filters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Filter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "read",
    possession: "own",
  })
  async filter(
    @graphql.Args() args: FilterFindUniqueArgs
  ): Promise<Filter | null> {
    const result = await this.service.filter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Filter)
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "create",
    possession: "any",
  })
  async createFilter(@graphql.Args() args: CreateFilterArgs): Promise<Filter> {
    return await this.service.createFilter({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Filter)
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "update",
    possession: "any",
  })
  async updateFilter(
    @graphql.Args() args: UpdateFilterArgs
  ): Promise<Filter | null> {
    try {
      return await this.service.updateFilter({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Filter)
  @nestAccessControl.UseRoles({
    resource: "Filter",
    action: "delete",
    possession: "any",
  })
  async deleteFilter(
    @graphql.Args() args: DeleteFilterArgs
  ): Promise<Filter | null> {
    try {
      return await this.service.deleteFilter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Filter): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
