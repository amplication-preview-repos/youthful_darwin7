/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FreelanceCategory as PrismaFreelanceCategory,
} from "@prisma/client";

export class FreelanceCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FreelanceCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.freelanceCategory.count(args);
  }

  async freelanceCategories(
    args: Prisma.FreelanceCategoryFindManyArgs
  ): Promise<PrismaFreelanceCategory[]> {
    return this.prisma.freelanceCategory.findMany(args);
  }
  async freelanceCategory(
    args: Prisma.FreelanceCategoryFindUniqueArgs
  ): Promise<PrismaFreelanceCategory | null> {
    return this.prisma.freelanceCategory.findUnique(args);
  }
  async createFreelanceCategory(
    args: Prisma.FreelanceCategoryCreateArgs
  ): Promise<PrismaFreelanceCategory> {
    return this.prisma.freelanceCategory.create(args);
  }
  async updateFreelanceCategory(
    args: Prisma.FreelanceCategoryUpdateArgs
  ): Promise<PrismaFreelanceCategory> {
    return this.prisma.freelanceCategory.update(args);
  }
  async deleteFreelanceCategory(
    args: Prisma.FreelanceCategoryDeleteArgs
  ): Promise<PrismaFreelanceCategory> {
    return this.prisma.freelanceCategory.delete(args);
  }
}
