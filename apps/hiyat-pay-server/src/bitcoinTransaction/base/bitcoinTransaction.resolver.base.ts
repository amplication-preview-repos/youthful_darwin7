/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BitcoinTransaction } from "./BitcoinTransaction";
import { BitcoinTransactionCountArgs } from "./BitcoinTransactionCountArgs";
import { BitcoinTransactionFindManyArgs } from "./BitcoinTransactionFindManyArgs";
import { BitcoinTransactionFindUniqueArgs } from "./BitcoinTransactionFindUniqueArgs";
import { CreateBitcoinTransactionArgs } from "./CreateBitcoinTransactionArgs";
import { UpdateBitcoinTransactionArgs } from "./UpdateBitcoinTransactionArgs";
import { DeleteBitcoinTransactionArgs } from "./DeleteBitcoinTransactionArgs";
import { BitcoinTransactionService } from "../bitcoinTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BitcoinTransaction)
export class BitcoinTransactionResolverBase {
  constructor(
    protected readonly service: BitcoinTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "read",
    possession: "any",
  })
  async _bitcoinTransactionsMeta(
    @graphql.Args() args: BitcoinTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BitcoinTransaction])
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "read",
    possession: "any",
  })
  async bitcoinTransactions(
    @graphql.Args() args: BitcoinTransactionFindManyArgs
  ): Promise<BitcoinTransaction[]> {
    return this.service.bitcoinTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BitcoinTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "read",
    possession: "own",
  })
  async bitcoinTransaction(
    @graphql.Args() args: BitcoinTransactionFindUniqueArgs
  ): Promise<BitcoinTransaction | null> {
    const result = await this.service.bitcoinTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BitcoinTransaction)
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "create",
    possession: "any",
  })
  async createBitcoinTransaction(
    @graphql.Args() args: CreateBitcoinTransactionArgs
  ): Promise<BitcoinTransaction> {
    return await this.service.createBitcoinTransaction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BitcoinTransaction)
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "update",
    possession: "any",
  })
  async updateBitcoinTransaction(
    @graphql.Args() args: UpdateBitcoinTransactionArgs
  ): Promise<BitcoinTransaction | null> {
    try {
      return await this.service.updateBitcoinTransaction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BitcoinTransaction)
  @nestAccessControl.UseRoles({
    resource: "BitcoinTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteBitcoinTransaction(
    @graphql.Args() args: DeleteBitcoinTransactionArgs
  ): Promise<BitcoinTransaction | null> {
    try {
      return await this.service.deleteBitcoinTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
