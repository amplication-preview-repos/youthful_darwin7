/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BitcoinTransaction as PrismaBitcoinTransaction,
} from "@prisma/client";

export class BitcoinTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BitcoinTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bitcoinTransaction.count(args);
  }

  async bitcoinTransactions(
    args: Prisma.BitcoinTransactionFindManyArgs
  ): Promise<PrismaBitcoinTransaction[]> {
    return this.prisma.bitcoinTransaction.findMany(args);
  }
  async bitcoinTransaction(
    args: Prisma.BitcoinTransactionFindUniqueArgs
  ): Promise<PrismaBitcoinTransaction | null> {
    return this.prisma.bitcoinTransaction.findUnique(args);
  }
  async createBitcoinTransaction(
    args: Prisma.BitcoinTransactionCreateArgs
  ): Promise<PrismaBitcoinTransaction> {
    return this.prisma.bitcoinTransaction.create(args);
  }
  async updateBitcoinTransaction(
    args: Prisma.BitcoinTransactionUpdateArgs
  ): Promise<PrismaBitcoinTransaction> {
    return this.prisma.bitcoinTransaction.update(args);
  }
  async deleteBitcoinTransaction(
    args: Prisma.BitcoinTransactionDeleteArgs
  ): Promise<PrismaBitcoinTransaction> {
    return this.prisma.bitcoinTransaction.delete(args);
  }
}
