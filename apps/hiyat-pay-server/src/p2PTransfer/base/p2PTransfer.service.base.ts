/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, P2PTransfer as PrismaP2PTransfer } from "@prisma/client";

export class P2PTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.P2PTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.p2PTransfer.count(args);
  }

  async p2PTransfers(
    args: Prisma.P2PTransferFindManyArgs
  ): Promise<PrismaP2PTransfer[]> {
    return this.prisma.p2PTransfer.findMany(args);
  }
  async p2PTransfer(
    args: Prisma.P2PTransferFindUniqueArgs
  ): Promise<PrismaP2PTransfer | null> {
    return this.prisma.p2PTransfer.findUnique(args);
  }
  async createP2PTransfer(
    args: Prisma.P2PTransferCreateArgs
  ): Promise<PrismaP2PTransfer> {
    return this.prisma.p2PTransfer.create(args);
  }
  async updateP2PTransfer(
    args: Prisma.P2PTransferUpdateArgs
  ): Promise<PrismaP2PTransfer> {
    return this.prisma.p2PTransfer.update(args);
  }
  async deleteP2PTransfer(
    args: Prisma.P2PTransferDeleteArgs
  ): Promise<PrismaP2PTransfer> {
    return this.prisma.p2PTransfer.delete(args);
  }
}
