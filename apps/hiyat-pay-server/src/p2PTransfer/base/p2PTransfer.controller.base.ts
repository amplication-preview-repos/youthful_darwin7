/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { P2PTransferService } from "../p2PTransfer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { P2PTransferCreateInput } from "./P2PTransferCreateInput";
import { P2PTransfer } from "./P2PTransfer";
import { P2PTransferFindManyArgs } from "./P2PTransferFindManyArgs";
import { P2PTransferWhereUniqueInput } from "./P2PTransferWhereUniqueInput";
import { P2PTransferUpdateInput } from "./P2PTransferUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class P2PTransferControllerBase {
  constructor(
    protected readonly service: P2PTransferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: P2PTransfer })
  @nestAccessControl.UseRoles({
    resource: "P2PTransfer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createP2PTransfer(
    @common.Body() data: P2PTransferCreateInput
  ): Promise<P2PTransfer> {
    return await this.service.createP2PTransfer({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [P2PTransfer] })
  @ApiNestedQuery(P2PTransferFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "P2PTransfer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async p2PTransfers(@common.Req() request: Request): Promise<P2PTransfer[]> {
    const args = plainToClass(P2PTransferFindManyArgs, request.query);
    return this.service.p2PTransfers({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: P2PTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "P2PTransfer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async p2PTransfer(
    @common.Param() params: P2PTransferWhereUniqueInput
  ): Promise<P2PTransfer | null> {
    const result = await this.service.p2PTransfer({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: P2PTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "P2PTransfer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateP2PTransfer(
    @common.Param() params: P2PTransferWhereUniqueInput,
    @common.Body() data: P2PTransferUpdateInput
  ): Promise<P2PTransfer | null> {
    try {
      return await this.service.updateP2PTransfer({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          receiver: true,
          sender: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: P2PTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "P2PTransfer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteP2PTransfer(
    @common.Param() params: P2PTransferWhereUniqueInput
  ): Promise<P2PTransfer | null> {
    try {
      return await this.service.deleteP2PTransfer({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          id: true,
          receiver: true,
          sender: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
