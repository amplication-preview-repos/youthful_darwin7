/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, InfluencerPage as PrismaInfluencerPage } from "@prisma/client";

export class InfluencerPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InfluencerPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.influencerPage.count(args);
  }

  async influencerPages(
    args: Prisma.InfluencerPageFindManyArgs
  ): Promise<PrismaInfluencerPage[]> {
    return this.prisma.influencerPage.findMany(args);
  }
  async influencerPage(
    args: Prisma.InfluencerPageFindUniqueArgs
  ): Promise<PrismaInfluencerPage | null> {
    return this.prisma.influencerPage.findUnique(args);
  }
  async createInfluencerPage(
    args: Prisma.InfluencerPageCreateArgs
  ): Promise<PrismaInfluencerPage> {
    return this.prisma.influencerPage.create(args);
  }
  async updateInfluencerPage(
    args: Prisma.InfluencerPageUpdateArgs
  ): Promise<PrismaInfluencerPage> {
    return this.prisma.influencerPage.update(args);
  }
  async deleteInfluencerPage(
    args: Prisma.InfluencerPageDeleteArgs
  ): Promise<PrismaInfluencerPage> {
    return this.prisma.influencerPage.delete(args);
  }
}
