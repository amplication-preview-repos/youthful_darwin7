/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BankTransfer } from "./BankTransfer";
import { BankTransferCountArgs } from "./BankTransferCountArgs";
import { BankTransferFindManyArgs } from "./BankTransferFindManyArgs";
import { BankTransferFindUniqueArgs } from "./BankTransferFindUniqueArgs";
import { CreateBankTransferArgs } from "./CreateBankTransferArgs";
import { UpdateBankTransferArgs } from "./UpdateBankTransferArgs";
import { DeleteBankTransferArgs } from "./DeleteBankTransferArgs";
import { BankTransferService } from "../bankTransfer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BankTransfer)
export class BankTransferResolverBase {
  constructor(
    protected readonly service: BankTransferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "read",
    possession: "any",
  })
  async _bankTransfersMeta(
    @graphql.Args() args: BankTransferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BankTransfer])
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "read",
    possession: "any",
  })
  async bankTransfers(
    @graphql.Args() args: BankTransferFindManyArgs
  ): Promise<BankTransfer[]> {
    return this.service.bankTransfers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BankTransfer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "read",
    possession: "own",
  })
  async bankTransfer(
    @graphql.Args() args: BankTransferFindUniqueArgs
  ): Promise<BankTransfer | null> {
    const result = await this.service.bankTransfer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BankTransfer)
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "create",
    possession: "any",
  })
  async createBankTransfer(
    @graphql.Args() args: CreateBankTransferArgs
  ): Promise<BankTransfer> {
    return await this.service.createBankTransfer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BankTransfer)
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "update",
    possession: "any",
  })
  async updateBankTransfer(
    @graphql.Args() args: UpdateBankTransferArgs
  ): Promise<BankTransfer | null> {
    try {
      return await this.service.updateBankTransfer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankTransfer)
  @nestAccessControl.UseRoles({
    resource: "BankTransfer",
    action: "delete",
    possession: "any",
  })
  async deleteBankTransfer(
    @graphql.Args() args: DeleteBankTransferArgs
  ): Promise<BankTransfer | null> {
    try {
      return await this.service.deleteBankTransfer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
