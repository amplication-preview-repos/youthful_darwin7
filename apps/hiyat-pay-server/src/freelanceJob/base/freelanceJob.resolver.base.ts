/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FreelanceJob } from "./FreelanceJob";
import { FreelanceJobCountArgs } from "./FreelanceJobCountArgs";
import { FreelanceJobFindManyArgs } from "./FreelanceJobFindManyArgs";
import { FreelanceJobFindUniqueArgs } from "./FreelanceJobFindUniqueArgs";
import { CreateFreelanceJobArgs } from "./CreateFreelanceJobArgs";
import { UpdateFreelanceJobArgs } from "./UpdateFreelanceJobArgs";
import { DeleteFreelanceJobArgs } from "./DeleteFreelanceJobArgs";
import { FreelanceJobService } from "../freelanceJob.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FreelanceJob)
export class FreelanceJobResolverBase {
  constructor(
    protected readonly service: FreelanceJobService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "read",
    possession: "any",
  })
  async _freelanceJobsMeta(
    @graphql.Args() args: FreelanceJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FreelanceJob])
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "read",
    possession: "any",
  })
  async freelanceJobs(
    @graphql.Args() args: FreelanceJobFindManyArgs
  ): Promise<FreelanceJob[]> {
    return this.service.freelanceJobs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FreelanceJob, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "read",
    possession: "own",
  })
  async freelanceJob(
    @graphql.Args() args: FreelanceJobFindUniqueArgs
  ): Promise<FreelanceJob | null> {
    const result = await this.service.freelanceJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FreelanceJob)
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "create",
    possession: "any",
  })
  async createFreelanceJob(
    @graphql.Args() args: CreateFreelanceJobArgs
  ): Promise<FreelanceJob> {
    return await this.service.createFreelanceJob({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FreelanceJob)
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "update",
    possession: "any",
  })
  async updateFreelanceJob(
    @graphql.Args() args: UpdateFreelanceJobArgs
  ): Promise<FreelanceJob | null> {
    try {
      return await this.service.updateFreelanceJob({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FreelanceJob)
  @nestAccessControl.UseRoles({
    resource: "FreelanceJob",
    action: "delete",
    possession: "any",
  })
  async deleteFreelanceJob(
    @graphql.Args() args: DeleteFreelanceJobArgs
  ): Promise<FreelanceJob | null> {
    try {
      return await this.service.deleteFreelanceJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
